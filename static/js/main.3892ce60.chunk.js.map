{"version":3,"sources":["sketches/Art1.js","App.js","reportWebVitals.js","index.js"],"names":["canvasWidth","canvasHeight","simplex","SimplexNoise","Art1","props","drawNoiseLine","opt","v","start","end","steps","frequency","time","amplitude","p5","xStart","yStart","xEnd","yEnd","beginShape","i","t","x","lerp","y","noise3D","vertex","endShape","setup","canvasParentRef","createCanvas","parent","mouseX","mouseY","draw","background","dim","Math","min","noFill","stroke","strokeWeight","millis","py","App","className","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAQMA,EAAc,IACdC,EAAe,IAKfC,EAAU,IAAIC,IA4FLC,EAzFF,SAACC,GACZ,IA6CQC,EAAgB,WAAe,IAAdC,EAAa,uDAAP,GAEvBC,EAQED,EARFC,EACAC,EAOEF,EAPFE,MACAC,EAMEH,EANFG,IAJ8B,EAU5BH,EALFI,aAL8B,MAKtB,GALsB,IAU5BJ,EAJFK,iBAN8B,MAMlB,EANkB,IAU5BL,EAHFM,YAP8B,MAOvB,EAPuB,IAU5BN,EAFFO,iBAR8B,MAQlB,EARkB,EAS9BC,EACER,EADFQ,GAT8B,cAYLN,EAZK,GAYxBO,EAZwB,KAYhBC,EAZgB,mBAaTP,EAbS,GAaxBQ,EAbwB,KAalBC,EAbkB,KAiBhCJ,EAAGK,aACH,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAOU,IAAK,CAE9B,IAAMC,EAAIX,GAAS,EAAI,GAAMU,GAAKV,EAAQ,GAGpCY,EAAIR,EAAGS,KAAKR,EAAQE,EAAMI,GAG5BG,EAAIV,EAAGS,KAAKP,EAAQE,EAAMG,GAG9BG,GAAMvB,EAAQwB,QAAQJ,EAAIV,EAAYC,EAAML,EAAII,EAAWC,GAASC,EAGpEC,EAAGY,OAAOJ,EAAGE,GAEfV,EAAGa,YAMT,OAAO,cAAC,IAAD,CAAQC,MArFD,SAACd,EAAIe,GAGjBf,EAAGgB,aAAa/B,EAAaC,GAAc+B,OAAOF,GAG9Cf,EAAGkB,OAASjC,IACZe,EAAGmB,OAASjC,KA8EWkC,KA3EhB,SAACpB,GACRA,EAAGqB,WAAW,GAEd,IAAMxB,EAAYG,EAAGS,KA3BV,GACA,EA0B2CT,EAAGkB,OAASjC,GAC5Dc,EAAYC,EAAGS,KA1BV,IACA,GAyB2CT,EAAGmB,OAASjC,GAE5DoC,EAAMC,KAAKC,IAAIvC,EAAaC,GAGlCc,EAAGyB,SACHzB,EAAG0B,OAAO,KACV1B,EAAG2B,aAAmB,MAANL,GAMhB,IAJA,IAAMxB,EAAOE,EAAG4B,SAAW,IAIlBlB,EAAI,EAAGA,EAHH,GAGaA,IAAK,CAE7B,IAAMjB,EAAsBiB,EAAC,EACvBmB,EAAKpC,EAAIP,EACfK,EAAc,CACZE,IACAC,MAAO,CAAE,EAAGmC,GACZlC,IAAK,CAAEV,EAAa4C,GACpB9B,UAAWA,EAAYb,EACvBW,YACAC,KAAa,GAAPA,EACNF,MAAO,IACPI,YChCG8B,MAtBf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,IACA,0CAGA,mBACEA,UAAU,WACVC,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,+BCCOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3892ce60.chunk.js","sourcesContent":["import React from \"react\";\nimport Sketch from \"react-p5\";\nimport SimplexNoise from \"simplex-noise\";\n\nlet minFrequency = 0.5;\nlet maxFrequency = 2;\nlet minAmplitude = 0.05;\nlet maxAmplitude = 0.5;\nconst canvasWidth = 300;\nconst canvasHeight = 300;\n\n// Included in index.html\n// This is an alternative to p5.js builtin 'noise' function,\n// It provides 4D noise and returns a value between -1 and 1\nconst simplex = new SimplexNoise();\n\n  \nconst Art1 = (props) => {\n  const setup = (p5, canvasParentRef) => {\n    // use parent to render the canvas in this ref\n    // (without that p5 will render the canvas outside of your component)\n    p5.createCanvas(canvasWidth, canvasHeight).parent(canvasParentRef);\n\n\n        p5.mouseX = canvasWidth / 2;\n        p5.mouseY = canvasHeight / 2;\n  };\n\n  const draw = (p5) => {\n        p5.background(0);\n  \n        const frequency = p5.lerp(minFrequency, maxFrequency, p5.mouseX / canvasWidth);\n        const amplitude = p5.lerp(minAmplitude, maxAmplitude, p5.mouseY / canvasHeight);\n        \n        const dim = Math.min(canvasWidth, canvasHeight);\n        \n        // Draw the background\n        p5.noFill();\n        p5.stroke(255);\n        p5.strokeWeight(dim * 0.0075);\n        \n        const time = p5.millis() / 1000;\n        const rows = 10;\n      \n        // Draw each line\n        for (let y = 0; y < rows; y++) {\n          // Determine the Y position of the line\n          const v = rows <= 1 ? 0.5 : y / (rows - 1);\n          const py = v * canvasHeight;\n          drawNoiseLine({\n            v,\n            start: [ 0, py ],\n            end: [ canvasWidth, py ],\n            amplitude: amplitude * canvasHeight,\n            frequency,\n            time: time * 0.5,\n            steps: 150,\n            p5\n          });\n        }\n      \n  };\n\n    const drawNoiseLine = (opt = {}) => {\n        const {\n          v,\n          start,\n          end,\n          steps = 10,\n          frequency = 1,\n          time = 0,\n          amplitude = 1,\n          p5\n        } = opt;\n        \n        const [ xStart, yStart ] = start;\n        const [ xEnd, yEnd ] = end;\n      \n        // Create a line by walking N steps and interpolating\n        // from start to end point at each interval\n        p5.beginShape();\n        for (let i = 0; i < steps; i++) {\n          // Get interpolation factor between 0..1\n          const t = steps <= 1 ? 0.5 : i / (steps - 1);\n      \n          // Interpolate X position\n          const x = p5.lerp(xStart, xEnd, t);\n          \n          // Interpolate Y position\n          let y = p5.lerp(yStart, yEnd, t);\n          \n          // Offset Y position by noise\n          y += (simplex.noise3D(t * frequency + time, v * frequency, time)) * amplitude;\n          \n          // Place vertex\n          p5.vertex(x, y);\n        }\n        p5.endShape();\n      }\n\n\n\n\n  return <Sketch setup={setup} draw={draw} />;\n};\n\nexport default Art1;\n\n","import './App.css';\nimport Art1 from './sketches/Art1';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Art1 />\n        <p>\n          Noisy Day\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}